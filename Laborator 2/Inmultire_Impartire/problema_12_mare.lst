     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 05                          a db 5
    15 00000001 03                          b db 3
    16 00000002 05                          c db 5
    17 00000003 05                          d db 5
    18 00000004 0500                        e dw 5
    19 00000006 0500                        f dw 5
    20 00000008 0500                        g dw 5
    21 0000000A 0500                        h dw 5
    22                                      ;(a*d+e)/[c+h/(c-b)]  30 / (10/ 2) = 30 / 5 == 6
    23                                  
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28                                      
    29                                          ; exit(0)
    30 00000000 A0[00000000]                    mov al,[a]
    31 00000005 F625[03000000]                  mul byte [d]; ax = a*d
    32 0000000B 660305[04000000]                add ax,[e] ; e = a*d + e
    33 00000012 66A3[04000000]                  mov [e],ax
    34 00000018 6631C0                          xor ax , ax
    35 0000001B A0[02000000]                    mov al,[c]
    36 00000020 660305[0A000000]                add ax,[h]
    37 00000027 8A1D[02000000]                  mov bl,[c]
    38 0000002D 2A1D[01000000]                  sub bl,[b]
    39 00000033 F6F3                            div bl
    40 00000035 88C3                            mov bl, al
    41 00000037 66A1[04000000]                  mov ax ,[e]
    42 0000003D F6F3                            div bl
    43                                          
    44                                          
    45 0000003F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    46 00000041 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
