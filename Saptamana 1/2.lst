     1                                  
     2                                  ; Scrieți un program în limbaj de asamblare care să rezolve expresia aritmetică, considerând domeniile de definiție ale variabilelor
     3                                  ; a - byte, b - word
     4                                  ; (b / a * 2 + 10) * b - b * 15;
     5                                  ; ex. 1: a = 10; b = 40; Rezultat: (40 / 10 * 2 + 10) * 40 - 40 * 15 = 18 * 40 - 1600 = 720 - 600 = 120
     6                                  ; ex. 2: a = 100; b = 50; Rezultat: (50 / 100 * 2 + 10) * 50 - 50 * 15 = 12 * 50 - 750 = 600 - 750 = - 150
     7                                  bits 32 ;asamblare si compilare pentru arhitectura de 32 biti
     8                                  ; definim punctul de intrare in programul principal
     9                                  global  start 
    10                                  
    11                                  extern  exit ; indicam asamblorului ca exit exista, chiar daca noi nu o vom defini
    12                                  import  exit msvcrt.dll; exit este o functie care incheie procesul, este definita in msvcrt.dll
    13                                          ; msvcrt.dll contine exit, printf si toate celelalte functii C-runtime importante
    14                                  segment  data use32 class=data ; segmentul de date in care se vor defini variabilele 
    15 00000000 0A                      	a  db 10
    16 00000001 2800                    	b  dw 40
    17                                  segment  code use32 class=code ; segmentul de cod
    18                                  start: 
    19 00000000 66A1[01000000]          	mov  AX, [b] ;AX = b
    20 00000006 F635[00000000]          	div  BYTE [a] ;AL = AX / a = b / a și AH = AX % a = b % a
    21                                  	
    22 0000000C B402                    	mov  AH, 2 ;AH = 2
    23 0000000E F6E4                    	mul  AH ;AX = AL * AH = b / a * 2	
    24                                  	
    25 00000010 6683C00A                	add  AX, 10 ;AX = AX + b = b / a * 2 + 10
    26                                  	
    27 00000014 66F725[01000000]        	mul  word [b] ;DX:AX = AX * b = (b / a * 2 + 10) * b
    28                                  	
    29 0000001B 6652                    	push  DX ;se pune pe stiva partea high din double word-ul DX:AX
    30 0000001D 6650                    	push  AX ;se pune pe stiva partea low din double word-ul DX:AX
    31 0000001F 5B                      	pop  EBX ;EBX = DX:AX = (b / a * 2 + 10) * b
    32                                  	
    33 00000020 66A1[01000000]          	mov  AX, [b] ;AX = b
    34 00000026 66BA0F00                	mov  DX, 15 ;DX = 15
    35 0000002A 66F7E2                  	mul  DX ;DX:AX = b * 15
    36                                  	
    37 0000002D 6652                    	push  DX ;se pune pe stiva partea high din double word-ul DX:AX
    38 0000002F 6650                    	push  AX ;se pune pe stiva partea low din double word-ul DX:AX
    39 00000031 58                      	pop  EAX ;EAX = DX:AX = b * 15
    40                                  	
    41 00000032 29C3                    	sub  EBX, EAX ;EBX = EBX - EAX = (b / a * 2 + 10) * b - b * 15
    42                                  	
    43 00000034 6A00                    	push   dword 0 ;se pune pe stiva codul de retur al functiei exit
    44 00000036 FF15[00000000]          	call   [exit] ;apelul functiei sistem exit pentru terminarea executiei programului	
