     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf             ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;Se da un sir de octeti reprezentand un text (succesiune de cuvinte separate de spatii). 
    15                                      ;Sa se identifice cuvintele de tip palindrom (ale caror oglindiri sunt similare cu cele de plecare):
    16                                      ;"cojoc", "capac" etc. 
    17 00000000 636F6A6F6320636F70-         sir_cuvinte db "cojoc copac capac otto pisica ",0
    17 00000009 616320636170616320-
    17 00000012 6F74746F2070697369-
    17 0000001B 63612000           
    18                                      len EQU $-sir_cuvinte
    19 0000001F 00<rept>                    cuvant times len db 0
    20 0000003E 00<rept>                    cuvant_de_afisat times len db 0
    21 0000005D 437576696E74656C65-         mesaj db "Cuvintele %ssunt palindroame"
    21 00000066 20257373756E742070-
    21 0000006F 616C696E64726F616D-
    21 00000078 65                 
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ;ne setam registri si flagurile
    26 00000000 68[3E000000]                    push cuvant_de_afisat ; adresa stringului cu cuvinte de afisat
    27 00000005 BB00000000                      mov ebx, 0
    28 0000000A BE[00000000]                    mov esi, sir_cuvinte 
    29 0000000F BF[3D000000]                    mov edi, cuvant+len-1
    30                                          adauga_cuvant:
    31 00000014 BF[3D000000]                        mov edi, cuvant+len-1
    32 00000019 89F3                                mov ebx,esi ;ebx = inc cuv
    33                                              loop :
    34 0000001B FC                                      cld 
    35 0000001C AC                                      lodsb ;incarcam in al un caracter
    36 0000001D 3C20                                    cmp al,' ' ; verificam sa nu fie spatiu
    37 0000001F 7404                                    je sfarsit_cuvant ; daca este spatiu sa termint cuvant
    38 00000021 FD                                      std ; punem in ordine inversa in edi setand d flag -> 1s
    39 00000022 AA                                      stosb ; stocam in edi un byte
    40 00000023 EBF6                                jmp loop ; daca am ajuns aici cunvatul nu este gata
    41                                          sfarsit_cuvant:
    42                                              
    43                                              ;mov edx,esi; edx = adresa sfarsitului cuv
    44 00000025 89DE                                mov esi, ebx ; esi= inceput cuvant 
    45 00000027 FC                                  cld
    46 00000028 83C701                              add edi, 1; aliniem edi si esi
    47                                              repeta:
    48 0000002B FC                                      cld
    49 0000002C AC                                      lodsb 
    50 0000002D 3C20                                    cmp al, ' '
    51 0000002F 7420                                    je final_palindrom ; daca se executa inseamna ca elementele au fost egale pana atunci
    52 00000031 AE                                      scasb ; comparam edi cu al
    53 00000032 7546                                    jne nu_palindrom; daca caracterele nu sunt identice sarim la ne_palindrom
    54 00000034 EBF5                                jmp repeta
    55                                              
    56                                          sfarsit:
    57 00000036 68[3E000000]                        push dword cuvant_de_afisat
    58 0000003B 68[5D000000]                        push dword mesaj
    59 00000040 FF15[00000000]                      call [printf] ;afisam cuvintele ce sunt palindraome
    60 00000046 83C408                              add esp, 4*2
    61 00000049 6A00                                push    dword 0      ; push the parameter for exit onto the stack
    62 0000004B FF15[00000000]                      call    [exit]       ; call exit to terminate the program
    63                                  
    64                                          final_palindrom:
    65 00000051 89DE                                mov esi, ebx
    66 00000053 5F                                  pop edi ; luam adresa string-ului cuvintelor de afisat din stack
    67                                              repeta2:
    68 00000054 AC                                      lodsb ; incarcam cuvantul pana la ' '
    69 00000055 3C20                                    cmp al, ' '
    70 00000057 7403                                    je salveaza
    71 00000059 AA                                      stosb 
    72 0000005A EBF8                                jmp repeta2
    73                                              salveaza:
    74 0000005C AA                                      stosb ; aduagam ' '
    75 0000005D 57                                      push edi ; salvam locatia in sirul cuvintelor de afisat
    76 0000005E EB00                                    jmp clear_cuvant
    77                                  
    78                                  
    79                                          clear_cuvant:
    80 00000060 FD                                  std
    81 00000061 BF[3D000000]                        mov edi, cuvant+len-1
    82 00000066 B91F000000                          mov ecx, len
    83 0000006B B000                                mov al, 0
    84 0000006D F3AA                                repz stosb ; setam cuvantul inversat la 0
    85                                              ;comparam esi cu final sir cuvinte
    86 0000006F B8[1D000000]                        mov eax,(sir_cuvinte+len-2)
    87 00000074 39C6                                cmp esi,eax
    88 00000076 729C                                jb adauga_cuvant ; continuam
    89 00000078 EBBC                                jmp sfarsit ; sfarsim program
    90                                          nu_palindrom:
    91                                              repeta3:
    92 0000007A AC                                      lodsb
    93 0000007B 3C20                                    cmp al, ' ' ; trece la urmatorul 
    94 0000007D 74E1                                    je clear_cuvant
    95 0000007F EBF9                                jmp repeta3
    96                                  
    97                                  
